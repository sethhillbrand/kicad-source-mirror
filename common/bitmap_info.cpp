/*
 * This program source code file is part of KiCad, a free EDA CAD application.
 *
 * Copyright KiCad Developers, see AUTHORS.txt for contributors.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/***************************************************************************************
 * This file is auto-generated by CMake when MAINTAIN_PNGS is on. Do not edit by hand! *
 * See resources/bitmap.png/CMakeLists.txt to build/see/edit the actual list of icons  *
 ***************************************************************************************/

#include <bitmaps/bitmaps_list.h>
#include <bitmaps/bitmap_info.h>

void BuildBitmapInfo( std::unordered_map<BITMAPS, std::vector<BITMAP_INFO>>& aBitmapInfoCache )
{
    aBitmapInfoCache[BITMAPS::e_24].emplace_back( BITMAPS::e_24, wxT( "e_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_48].emplace_back( BITMAPS::e_48, wxT( "e_48_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_96].emplace_back( BITMAPS::e_96, wxT( "e_96_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_192].emplace_back( BITMAPS::e_192, wxT( "e_192_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_add].emplace_back( BITMAPS::git_add, wxT( "git_add_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_changed_ahead].emplace_back( BITMAPS::git_changed_ahead, wxT( "git_changed_ahead_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_conflict].emplace_back( BITMAPS::git_conflict, wxT( "git_conflict_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_delete].emplace_back( BITMAPS::git_delete, wxT( "git_delete_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_good_check].emplace_back( BITMAPS::git_good_check, wxT( "git_good_check_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_modified].emplace_back( BITMAPS::git_modified, wxT( "git_modified_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_out_of_date].emplace_back( BITMAPS::git_out_of_date, wxT( "git_out_of_date_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_16].emplace_back( BITMAPS::icon_bitmap2component_16, wxT( "icon_bitmap2component_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_16].emplace_back( BITMAPS::icon_eeschema_16, wxT( "icon_eeschema_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_16].emplace_back( BITMAPS::icon_gerbview_16, wxT( "icon_gerbview_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_16].emplace_back( BITMAPS::icon_kicad_16, wxT( "icon_kicad_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_16].emplace_back( BITMAPS::icon_kicad_nightly_16, wxT( "icon_kicad_nightly_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_16].emplace_back( BITMAPS::icon_libedit_16, wxT( "icon_libedit_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_16].emplace_back( BITMAPS::icon_modedit_16, wxT( "icon_modedit_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_16].emplace_back( BITMAPS::icon_pagelayout_editor_16, wxT( "icon_pagelayout_editor_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_16].emplace_back( BITMAPS::icon_pcbcalculator_16, wxT( "icon_pcbcalculator_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_16].emplace_back( BITMAPS::icon_pcbnew_16, wxT( "icon_pcbnew_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_left].emplace_back( BITMAPS::label_align_left, wxT( "label_align_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_right].emplace_back( BITMAPS::label_align_right, wxT( "label_align_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_top].emplace_back( BITMAPS::label_align_top, wxT( "label_align_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_bottom].emplace_back( BITMAPS::label_align_bottom, wxT( "label_align_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets_16].emplace_back( BITMAPS::list_nets_16, wxT( "list_nets_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::notifications].emplace_back( BITMAPS::notifications, wxT( "notifications_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic_16].emplace_back( BITMAPS::options_generic_16, wxT( "options_generic_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_right].emplace_back( BITMAPS::pinorient_right, wxT( "pinorient_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_left].emplace_back( BITMAPS::pinorient_left, wxT( "pinorient_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_up].emplace_back( BITMAPS::pinorient_up, wxT( "pinorient_up_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_down].emplace_back( BITMAPS::pinorient_down, wxT( "pinorient_down_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_normal].emplace_back( BITMAPS::pinshape_normal, wxT( "pinshape_normal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_invert].emplace_back( BITMAPS::pinshape_invert, wxT( "pinshape_invert_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_normal].emplace_back( BITMAPS::pinshape_clock_normal, wxT( "pinshape_clock_normal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_invert].emplace_back( BITMAPS::pinshape_clock_invert, wxT( "pinshape_clock_invert_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_input].emplace_back( BITMAPS::pinshape_active_low_input, wxT( "pinshape_active_low_input_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_active_low].emplace_back( BITMAPS::pinshape_clock_active_low, wxT( "pinshape_clock_active_low_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_output].emplace_back( BITMAPS::pinshape_active_low_output, wxT( "pinshape_active_low_output_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_fall].emplace_back( BITMAPS::pinshape_clock_fall, wxT( "pinshape_clock_fall_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_nonlogic].emplace_back( BITMAPS::pinshape_nonlogic, wxT( "pinshape_nonlogic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_input].emplace_back( BITMAPS::pintype_input, wxT( "pintype_input_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_output].emplace_back( BITMAPS::pintype_output, wxT( "pintype_output_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_bidi].emplace_back( BITMAPS::pintype_bidi, wxT( "pintype_bidi_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_3states].emplace_back( BITMAPS::pintype_3states, wxT( "pintype_3states_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_passive].emplace_back( BITMAPS::pintype_passive, wxT( "pintype_passive_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_notspecif].emplace_back( BITMAPS::pintype_notspecif, wxT( "pintype_notspecif_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_powerinput].emplace_back( BITMAPS::pintype_powerinput, wxT( "pintype_powerinput_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_poweroutput].emplace_back( BITMAPS::pintype_poweroutput, wxT( "pintype_poweroutput_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_opencoll].emplace_back( BITMAPS::pintype_opencoll, wxT( "pintype_opencoll_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_openemit].emplace_back( BITMAPS::pintype_openemit, wxT( "pintype_openemit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_nic].emplace_back( BITMAPS::pintype_nic, wxT( "pintype_nic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_noconnect].emplace_back( BITMAPS::pintype_noconnect, wxT( "pintype_noconnect_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_down].emplace_back( BITMAPS::small_down, wxT( "small_down_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_edit].emplace_back( BITMAPS::small_edit, wxT( "small_edit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_folder].emplace_back( BITMAPS::small_folder, wxT( "small_folder_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_library].emplace_back( BITMAPS::small_library, wxT( "small_library_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_new_window].emplace_back( BITMAPS::small_new_window, wxT( "small_new_window_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_plus].emplace_back( BITMAPS::small_plus, wxT( "small_plus_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_refresh].emplace_back( BITMAPS::small_refresh, wxT( "small_refresh_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_sort_desc].emplace_back( BITMAPS::small_sort_desc, wxT( "small_sort_desc_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_trash].emplace_back( BITMAPS::small_trash, wxT( "small_trash_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_up].emplace_back( BITMAPS::small_up, wxT( "small_up_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_warning].emplace_back( BITMAPS::small_warning, wxT( "small_warning_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_horizontal].emplace_back( BITMAPS::text_horizontal, wxT( "text_horizontal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_vertical].emplace_back( BITMAPS::text_vertical, wxT( "text_vertical_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_left].emplace_back( BITMAPS::text_align_left, wxT( "text_align_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_center].emplace_back( BITMAPS::text_align_center, wxT( "text_align_center_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_right].emplace_back( BITMAPS::text_align_right, wxT( "text_align_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_bottom].emplace_back( BITMAPS::text_align_bottom, wxT( "text_align_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_middle].emplace_back( BITMAPS::text_align_middle, wxT( "text_align_middle_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_top].emplace_back( BITMAPS::text_align_top, wxT( "text_align_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_top].emplace_back( BITMAPS::text_valign_top, wxT( "text_valign_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_center].emplace_back( BITMAPS::text_valign_center, wxT( "text_valign_center_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_bottom].emplace_back( BITMAPS::text_valign_bottom, wxT( "text_valign_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_bold].emplace_back( BITMAPS::text_bold, wxT( "text_bold_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_italic].emplace_back( BITMAPS::text_italic, wxT( "text_italic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_mirrored].emplace_back( BITMAPS::text_mirrored, wxT( "text_mirrored_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tree_nosel].emplace_back( BITMAPS::tree_nosel, wxT( "tree_nosel_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tree_sel].emplace_back( BITMAPS::tree_sel, wxT( "tree_sel_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::visibility].emplace_back( BITMAPS::visibility, wxT( "visibility_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::visibility_off].emplace_back( BITMAPS::visibility_off, wxT( "visibility_off_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::www].emplace_back( BITMAPS::www, wxT( "www_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_24].emplace_back( BITMAPS::e_24, wxT( "e_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_48].emplace_back( BITMAPS::e_48, wxT( "e_48_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_96].emplace_back( BITMAPS::e_96, wxT( "e_96_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_192].emplace_back( BITMAPS::e_192, wxT( "e_192_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_add].emplace_back( BITMAPS::git_add, wxT( "git_add_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_changed_ahead].emplace_back( BITMAPS::git_changed_ahead, wxT( "git_changed_ahead_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_conflict].emplace_back( BITMAPS::git_conflict, wxT( "git_conflict_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_delete].emplace_back( BITMAPS::git_delete, wxT( "git_delete_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_good_check].emplace_back( BITMAPS::git_good_check, wxT( "git_good_check_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_modified].emplace_back( BITMAPS::git_modified, wxT( "git_modified_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_out_of_date].emplace_back( BITMAPS::git_out_of_date, wxT( "git_out_of_date_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_16].emplace_back( BITMAPS::icon_bitmap2component_16, wxT( "icon_bitmap2component_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_16].emplace_back( BITMAPS::icon_eeschema_16, wxT( "icon_eeschema_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_16].emplace_back( BITMAPS::icon_gerbview_16, wxT( "icon_gerbview_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_16].emplace_back( BITMAPS::icon_kicad_16, wxT( "icon_kicad_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_16].emplace_back( BITMAPS::icon_kicad_nightly_16, wxT( "icon_kicad_nightly_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_16].emplace_back( BITMAPS::icon_libedit_16, wxT( "icon_libedit_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_16].emplace_back( BITMAPS::icon_modedit_16, wxT( "icon_modedit_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_16].emplace_back( BITMAPS::icon_pagelayout_editor_16, wxT( "icon_pagelayout_editor_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_16].emplace_back( BITMAPS::icon_pcbcalculator_16, wxT( "icon_pcbcalculator_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_16].emplace_back( BITMAPS::icon_pcbnew_16, wxT( "icon_pcbnew_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_left].emplace_back( BITMAPS::label_align_left, wxT( "label_align_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_right].emplace_back( BITMAPS::label_align_right, wxT( "label_align_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_top].emplace_back( BITMAPS::label_align_top, wxT( "label_align_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_bottom].emplace_back( BITMAPS::label_align_bottom, wxT( "label_align_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets_16].emplace_back( BITMAPS::list_nets_16, wxT( "list_nets_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::notifications].emplace_back( BITMAPS::notifications, wxT( "notifications_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic_16].emplace_back( BITMAPS::options_generic_16, wxT( "options_generic_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_right].emplace_back( BITMAPS::pinorient_right, wxT( "pinorient_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_left].emplace_back( BITMAPS::pinorient_left, wxT( "pinorient_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_up].emplace_back( BITMAPS::pinorient_up, wxT( "pinorient_up_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_down].emplace_back( BITMAPS::pinorient_down, wxT( "pinorient_down_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_normal].emplace_back( BITMAPS::pinshape_normal, wxT( "pinshape_normal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_invert].emplace_back( BITMAPS::pinshape_invert, wxT( "pinshape_invert_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_normal].emplace_back( BITMAPS::pinshape_clock_normal, wxT( "pinshape_clock_normal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_invert].emplace_back( BITMAPS::pinshape_clock_invert, wxT( "pinshape_clock_invert_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_input].emplace_back( BITMAPS::pinshape_active_low_input, wxT( "pinshape_active_low_input_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_active_low].emplace_back( BITMAPS::pinshape_clock_active_low, wxT( "pinshape_clock_active_low_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_output].emplace_back( BITMAPS::pinshape_active_low_output, wxT( "pinshape_active_low_output_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_fall].emplace_back( BITMAPS::pinshape_clock_fall, wxT( "pinshape_clock_fall_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_nonlogic].emplace_back( BITMAPS::pinshape_nonlogic, wxT( "pinshape_nonlogic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_input].emplace_back( BITMAPS::pintype_input, wxT( "pintype_input_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_output].emplace_back( BITMAPS::pintype_output, wxT( "pintype_output_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_bidi].emplace_back( BITMAPS::pintype_bidi, wxT( "pintype_bidi_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_3states].emplace_back( BITMAPS::pintype_3states, wxT( "pintype_3states_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_passive].emplace_back( BITMAPS::pintype_passive, wxT( "pintype_passive_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_notspecif].emplace_back( BITMAPS::pintype_notspecif, wxT( "pintype_notspecif_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_powerinput].emplace_back( BITMAPS::pintype_powerinput, wxT( "pintype_powerinput_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_poweroutput].emplace_back( BITMAPS::pintype_poweroutput, wxT( "pintype_poweroutput_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_opencoll].emplace_back( BITMAPS::pintype_opencoll, wxT( "pintype_opencoll_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_openemit].emplace_back( BITMAPS::pintype_openemit, wxT( "pintype_openemit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_nic].emplace_back( BITMAPS::pintype_nic, wxT( "pintype_nic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_noconnect].emplace_back( BITMAPS::pintype_noconnect, wxT( "pintype_noconnect_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_down].emplace_back( BITMAPS::small_down, wxT( "small_down_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_edit].emplace_back( BITMAPS::small_edit, wxT( "small_edit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_folder].emplace_back( BITMAPS::small_folder, wxT( "small_folder_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_library].emplace_back( BITMAPS::small_library, wxT( "small_library_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_new_window].emplace_back( BITMAPS::small_new_window, wxT( "small_new_window_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_plus].emplace_back( BITMAPS::small_plus, wxT( "small_plus_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_refresh].emplace_back( BITMAPS::small_refresh, wxT( "small_refresh_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_sort_desc].emplace_back( BITMAPS::small_sort_desc, wxT( "small_sort_desc_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_trash].emplace_back( BITMAPS::small_trash, wxT( "small_trash_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_up].emplace_back( BITMAPS::small_up, wxT( "small_up_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_warning].emplace_back( BITMAPS::small_warning, wxT( "small_warning_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_horizontal].emplace_back( BITMAPS::text_horizontal, wxT( "text_horizontal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_vertical].emplace_back( BITMAPS::text_vertical, wxT( "text_vertical_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_left].emplace_back( BITMAPS::text_align_left, wxT( "text_align_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_center].emplace_back( BITMAPS::text_align_center, wxT( "text_align_center_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_right].emplace_back( BITMAPS::text_align_right, wxT( "text_align_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_bottom].emplace_back( BITMAPS::text_align_bottom, wxT( "text_align_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_middle].emplace_back( BITMAPS::text_align_middle, wxT( "text_align_middle_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_top].emplace_back( BITMAPS::text_align_top, wxT( "text_align_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_top].emplace_back( BITMAPS::text_valign_top, wxT( "text_valign_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_center].emplace_back( BITMAPS::text_valign_center, wxT( "text_valign_center_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_bottom].emplace_back( BITMAPS::text_valign_bottom, wxT( "text_valign_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_bold].emplace_back( BITMAPS::text_bold, wxT( "text_bold_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_italic].emplace_back( BITMAPS::text_italic, wxT( "text_italic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_mirrored].emplace_back( BITMAPS::text_mirrored, wxT( "text_mirrored_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tree_nosel].emplace_back( BITMAPS::tree_nosel, wxT( "tree_nosel_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tree_sel].emplace_back( BITMAPS::tree_sel, wxT( "tree_sel_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::visibility].emplace_back( BITMAPS::visibility, wxT( "visibility_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::visibility_off].emplace_back( BITMAPS::visibility_off, wxT( "visibility_off_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::www].emplace_back( BITMAPS::www, wxT( "www_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_24].emplace_back( BITMAPS::e_24, wxT( "e_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_48].emplace_back( BITMAPS::e_48, wxT( "e_48_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_96].emplace_back( BITMAPS::e_96, wxT( "e_96_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_192].emplace_back( BITMAPS::e_192, wxT( "e_192_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_add].emplace_back( BITMAPS::git_add, wxT( "git_add_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_changed_ahead].emplace_back( BITMAPS::git_changed_ahead, wxT( "git_changed_ahead_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_conflict].emplace_back( BITMAPS::git_conflict, wxT( "git_conflict_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_delete].emplace_back( BITMAPS::git_delete, wxT( "git_delete_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_good_check].emplace_back( BITMAPS::git_good_check, wxT( "git_good_check_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_modified].emplace_back( BITMAPS::git_modified, wxT( "git_modified_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::git_out_of_date].emplace_back( BITMAPS::git_out_of_date, wxT( "git_out_of_date_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_16].emplace_back( BITMAPS::icon_bitmap2component_16, wxT( "icon_bitmap2component_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_16].emplace_back( BITMAPS::icon_eeschema_16, wxT( "icon_eeschema_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_16].emplace_back( BITMAPS::icon_gerbview_16, wxT( "icon_gerbview_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_16].emplace_back( BITMAPS::icon_kicad_16, wxT( "icon_kicad_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_16].emplace_back( BITMAPS::icon_kicad_nightly_16, wxT( "icon_kicad_nightly_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_16].emplace_back( BITMAPS::icon_libedit_16, wxT( "icon_libedit_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_16].emplace_back( BITMAPS::icon_modedit_16, wxT( "icon_modedit_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_16].emplace_back( BITMAPS::icon_pagelayout_editor_16, wxT( "icon_pagelayout_editor_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_16].emplace_back( BITMAPS::icon_pcbcalculator_16, wxT( "icon_pcbcalculator_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_16].emplace_back( BITMAPS::icon_pcbnew_16, wxT( "icon_pcbnew_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_left].emplace_back( BITMAPS::label_align_left, wxT( "label_align_left_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_right].emplace_back( BITMAPS::label_align_right, wxT( "label_align_right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_top].emplace_back( BITMAPS::label_align_top, wxT( "label_align_top_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_bottom].emplace_back( BITMAPS::label_align_bottom, wxT( "label_align_bottom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets_16].emplace_back( BITMAPS::list_nets_16, wxT( "list_nets_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::notifications].emplace_back( BITMAPS::notifications, wxT( "notifications_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic_16].emplace_back( BITMAPS::options_generic_16, wxT( "options_generic_16_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_right].emplace_back( BITMAPS::pinorient_right, wxT( "pinorient_right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_left].emplace_back( BITMAPS::pinorient_left, wxT( "pinorient_left_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_up].emplace_back( BITMAPS::pinorient_up, wxT( "pinorient_up_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_down].emplace_back( BITMAPS::pinorient_down, wxT( "pinorient_down_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_normal].emplace_back( BITMAPS::pinshape_normal, wxT( "pinshape_normal_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_invert].emplace_back( BITMAPS::pinshape_invert, wxT( "pinshape_invert_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_normal].emplace_back( BITMAPS::pinshape_clock_normal, wxT( "pinshape_clock_normal_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_invert].emplace_back( BITMAPS::pinshape_clock_invert, wxT( "pinshape_clock_invert_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_input].emplace_back( BITMAPS::pinshape_active_low_input, wxT( "pinshape_active_low_input_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_active_low].emplace_back( BITMAPS::pinshape_clock_active_low, wxT( "pinshape_clock_active_low_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_output].emplace_back( BITMAPS::pinshape_active_low_output, wxT( "pinshape_active_low_output_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_fall].emplace_back( BITMAPS::pinshape_clock_fall, wxT( "pinshape_clock_fall_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_nonlogic].emplace_back( BITMAPS::pinshape_nonlogic, wxT( "pinshape_nonlogic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_input].emplace_back( BITMAPS::pintype_input, wxT( "pintype_input_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_output].emplace_back( BITMAPS::pintype_output, wxT( "pintype_output_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_bidi].emplace_back( BITMAPS::pintype_bidi, wxT( "pintype_bidi_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_3states].emplace_back( BITMAPS::pintype_3states, wxT( "pintype_3states_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_passive].emplace_back( BITMAPS::pintype_passive, wxT( "pintype_passive_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_notspecif].emplace_back( BITMAPS::pintype_notspecif, wxT( "pintype_notspecif_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_powerinput].emplace_back( BITMAPS::pintype_powerinput, wxT( "pintype_powerinput_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_poweroutput].emplace_back( BITMAPS::pintype_poweroutput, wxT( "pintype_poweroutput_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_opencoll].emplace_back( BITMAPS::pintype_opencoll, wxT( "pintype_opencoll_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_openemit].emplace_back( BITMAPS::pintype_openemit, wxT( "pintype_openemit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_nic].emplace_back( BITMAPS::pintype_nic, wxT( "pintype_nic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_noconnect].emplace_back( BITMAPS::pintype_noconnect, wxT( "pintype_noconnect_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_down].emplace_back( BITMAPS::small_down, wxT( "small_down_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_edit].emplace_back( BITMAPS::small_edit, wxT( "small_edit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_folder].emplace_back( BITMAPS::small_folder, wxT( "small_folder_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_library].emplace_back( BITMAPS::small_library, wxT( "small_library_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_new_window].emplace_back( BITMAPS::small_new_window, wxT( "small_new_window_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_plus].emplace_back( BITMAPS::small_plus, wxT( "small_plus_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_refresh].emplace_back( BITMAPS::small_refresh, wxT( "small_refresh_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_sort_desc].emplace_back( BITMAPS::small_sort_desc, wxT( "small_sort_desc_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_trash].emplace_back( BITMAPS::small_trash, wxT( "small_trash_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_up].emplace_back( BITMAPS::small_up, wxT( "small_up_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_warning].emplace_back( BITMAPS::small_warning, wxT( "small_warning_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_horizontal].emplace_back( BITMAPS::text_horizontal, wxT( "text_horizontal_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_vertical].emplace_back( BITMAPS::text_vertical, wxT( "text_vertical_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_left].emplace_back( BITMAPS::text_align_left, wxT( "text_align_left_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_center].emplace_back( BITMAPS::text_align_center, wxT( "text_align_center_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_right].emplace_back( BITMAPS::text_align_right, wxT( "text_align_right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_bottom].emplace_back( BITMAPS::text_align_bottom, wxT( "text_align_bottom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_middle].emplace_back( BITMAPS::text_align_middle, wxT( "text_align_middle_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_top].emplace_back( BITMAPS::text_align_top, wxT( "text_align_top_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_top].emplace_back( BITMAPS::text_valign_top, wxT( "text_valign_top_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_center].emplace_back( BITMAPS::text_valign_center, wxT( "text_valign_center_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_bottom].emplace_back( BITMAPS::text_valign_bottom, wxT( "text_valign_bottom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_bold].emplace_back( BITMAPS::text_bold, wxT( "text_bold_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_italic].emplace_back( BITMAPS::text_italic, wxT( "text_italic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_mirrored].emplace_back( BITMAPS::text_mirrored, wxT( "text_mirrored_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tree_nosel].emplace_back( BITMAPS::tree_nosel, wxT( "tree_nosel_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tree_sel].emplace_back( BITMAPS::tree_sel, wxT( "tree_sel_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::visibility].emplace_back( BITMAPS::visibility, wxT( "visibility_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::visibility_off].emplace_back( BITMAPS::visibility_off, wxT( "visibility_off_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::www].emplace_back( BITMAPS::www, wxT( "www_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::e_24].emplace_back( BITMAPS::e_24, wxT( "e_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_48].emplace_back( BITMAPS::e_48, wxT( "e_48_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_96].emplace_back( BITMAPS::e_96, wxT( "e_96_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::e_192].emplace_back( BITMAPS::e_192, wxT( "e_192_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_add].emplace_back( BITMAPS::git_add, wxT( "git_add_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_changed_ahead].emplace_back( BITMAPS::git_changed_ahead, wxT( "git_changed_ahead_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_conflict].emplace_back( BITMAPS::git_conflict, wxT( "git_conflict_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_delete].emplace_back( BITMAPS::git_delete, wxT( "git_delete_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_good_check].emplace_back( BITMAPS::git_good_check, wxT( "git_good_check_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_modified].emplace_back( BITMAPS::git_modified, wxT( "git_modified_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::git_out_of_date].emplace_back( BITMAPS::git_out_of_date, wxT( "git_out_of_date_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_16].emplace_back( BITMAPS::icon_bitmap2component_16, wxT( "icon_bitmap2component_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_16].emplace_back( BITMAPS::icon_eeschema_16, wxT( "icon_eeschema_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_16].emplace_back( BITMAPS::icon_gerbview_16, wxT( "icon_gerbview_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_16].emplace_back( BITMAPS::icon_kicad_16, wxT( "icon_kicad_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_16].emplace_back( BITMAPS::icon_kicad_nightly_16, wxT( "icon_kicad_nightly_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_16].emplace_back( BITMAPS::icon_libedit_16, wxT( "icon_libedit_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_16].emplace_back( BITMAPS::icon_modedit_16, wxT( "icon_modedit_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_16].emplace_back( BITMAPS::icon_pagelayout_editor_16, wxT( "icon_pagelayout_editor_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_16].emplace_back( BITMAPS::icon_pcbcalculator_16, wxT( "icon_pcbcalculator_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_16].emplace_back( BITMAPS::icon_pcbnew_16, wxT( "icon_pcbnew_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_left].emplace_back( BITMAPS::label_align_left, wxT( "label_align_left_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_right].emplace_back( BITMAPS::label_align_right, wxT( "label_align_right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_top].emplace_back( BITMAPS::label_align_top, wxT( "label_align_top_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_bottom].emplace_back( BITMAPS::label_align_bottom, wxT( "label_align_bottom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets_16].emplace_back( BITMAPS::list_nets_16, wxT( "list_nets_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::notifications].emplace_back( BITMAPS::notifications, wxT( "notifications_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic_16].emplace_back( BITMAPS::options_generic_16, wxT( "options_generic_16_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_right].emplace_back( BITMAPS::pinorient_right, wxT( "pinorient_right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_left].emplace_back( BITMAPS::pinorient_left, wxT( "pinorient_left_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_up].emplace_back( BITMAPS::pinorient_up, wxT( "pinorient_up_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_down].emplace_back( BITMAPS::pinorient_down, wxT( "pinorient_down_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_normal].emplace_back( BITMAPS::pinshape_normal, wxT( "pinshape_normal_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_invert].emplace_back( BITMAPS::pinshape_invert, wxT( "pinshape_invert_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_normal].emplace_back( BITMAPS::pinshape_clock_normal, wxT( "pinshape_clock_normal_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_invert].emplace_back( BITMAPS::pinshape_clock_invert, wxT( "pinshape_clock_invert_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_input].emplace_back( BITMAPS::pinshape_active_low_input, wxT( "pinshape_active_low_input_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_active_low].emplace_back( BITMAPS::pinshape_clock_active_low, wxT( "pinshape_clock_active_low_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_output].emplace_back( BITMAPS::pinshape_active_low_output, wxT( "pinshape_active_low_output_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_fall].emplace_back( BITMAPS::pinshape_clock_fall, wxT( "pinshape_clock_fall_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_nonlogic].emplace_back( BITMAPS::pinshape_nonlogic, wxT( "pinshape_nonlogic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_input].emplace_back( BITMAPS::pintype_input, wxT( "pintype_input_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_output].emplace_back( BITMAPS::pintype_output, wxT( "pintype_output_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_bidi].emplace_back( BITMAPS::pintype_bidi, wxT( "pintype_bidi_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_3states].emplace_back( BITMAPS::pintype_3states, wxT( "pintype_3states_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_passive].emplace_back( BITMAPS::pintype_passive, wxT( "pintype_passive_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_notspecif].emplace_back( BITMAPS::pintype_notspecif, wxT( "pintype_notspecif_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_powerinput].emplace_back( BITMAPS::pintype_powerinput, wxT( "pintype_powerinput_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_poweroutput].emplace_back( BITMAPS::pintype_poweroutput, wxT( "pintype_poweroutput_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_opencoll].emplace_back( BITMAPS::pintype_opencoll, wxT( "pintype_opencoll_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_openemit].emplace_back( BITMAPS::pintype_openemit, wxT( "pintype_openemit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_nic].emplace_back( BITMAPS::pintype_nic, wxT( "pintype_nic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_noconnect].emplace_back( BITMAPS::pintype_noconnect, wxT( "pintype_noconnect_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_down].emplace_back( BITMAPS::small_down, wxT( "small_down_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_edit].emplace_back( BITMAPS::small_edit, wxT( "small_edit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_folder].emplace_back( BITMAPS::small_folder, wxT( "small_folder_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_library].emplace_back( BITMAPS::small_library, wxT( "small_library_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_new_window].emplace_back( BITMAPS::small_new_window, wxT( "small_new_window_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_plus].emplace_back( BITMAPS::small_plus, wxT( "small_plus_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_refresh].emplace_back( BITMAPS::small_refresh, wxT( "small_refresh_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_sort_desc].emplace_back( BITMAPS::small_sort_desc, wxT( "small_sort_desc_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_trash].emplace_back( BITMAPS::small_trash, wxT( "small_trash_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_up].emplace_back( BITMAPS::small_up, wxT( "small_up_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_warning].emplace_back( BITMAPS::small_warning, wxT( "small_warning_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_horizontal].emplace_back( BITMAPS::text_horizontal, wxT( "text_horizontal_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_vertical].emplace_back( BITMAPS::text_vertical, wxT( "text_vertical_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_left].emplace_back( BITMAPS::text_align_left, wxT( "text_align_left_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_center].emplace_back( BITMAPS::text_align_center, wxT( "text_align_center_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_right].emplace_back( BITMAPS::text_align_right, wxT( "text_align_right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_bottom].emplace_back( BITMAPS::text_align_bottom, wxT( "text_align_bottom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_middle].emplace_back( BITMAPS::text_align_middle, wxT( "text_align_middle_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_top].emplace_back( BITMAPS::text_align_top, wxT( "text_align_top_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_top].emplace_back( BITMAPS::text_valign_top, wxT( "text_valign_top_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_center].emplace_back( BITMAPS::text_valign_center, wxT( "text_valign_center_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_bottom].emplace_back( BITMAPS::text_valign_bottom, wxT( "text_valign_bottom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_bold].emplace_back( BITMAPS::text_bold, wxT( "text_bold_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_italic].emplace_back( BITMAPS::text_italic, wxT( "text_italic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_mirrored].emplace_back( BITMAPS::text_mirrored, wxT( "text_mirrored_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tree_nosel].emplace_back( BITMAPS::tree_nosel, wxT( "tree_nosel_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tree_sel].emplace_back( BITMAPS::tree_sel, wxT( "tree_sel_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::visibility].emplace_back( BITMAPS::visibility, wxT( "visibility_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::visibility_off].emplace_back( BITMAPS::visibility_off, wxT( "visibility_off_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::www].emplace_back( BITMAPS::www, wxT( "www_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bezier].emplace_back( BITMAPS::add_bezier, wxT( "add_bezier_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_elements_to_grid].emplace_back( BITMAPS::align_elements_to_grid, wxT( "align_elements_to_grid_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_increment].emplace_back( BITMAPS::annotate_increment, wxT( "annotate_increment_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::body_style].emplace_back( BITMAPS::body_style, wxT( "body_style_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::chamfer].emplace_back( BITMAPS::chamfer, wxT( "chamfer_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_graphics].emplace_back( BITMAPS::cleanup_graphics, wxT( "cleanup_graphics_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cleanup_tracks_and_vias].emplace_back( BITMAPS::cleanup_tracks_and_vias, wxT( "cleanup_tracks_and_vias_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copilot].emplace_back( BITMAPS::copilot, wxT( "copilot_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_centers].emplace_back( BITMAPS::distribute_horizontal_centers, wxT( "distribute_horizontal_centers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal_gaps].emplace_back( BITMAPS::distribute_horizontal_gaps, wxT( "distribute_horizontal_gaps_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_centers].emplace_back( BITMAPS::distribute_vertical_centers, wxT( "distribute_vertical_centers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical_gaps].emplace_back( BITMAPS::distribute_vertical_gaps, wxT( "distribute_vertical_gaps_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment].emplace_back( BITMAPS::drag_segment, wxT( "drag_segment_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_gltf].emplace_back( BITMAPS::export_gltf, wxT( "export_gltf_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_cir].emplace_back( BITMAPS::file_cir, wxT( "file_cir_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fillet].emplace_back( BITMAPS::fillet, wxT( "fillet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_override].emplace_back( BITMAPS::grid_override, wxT( "grid_override_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::heal_shapes].emplace_back( BITMAPS::heal_shapes, wxT( "heal_shapes_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_24].emplace_back( BITMAPS::icon_kicad_24, wxT( "icon_kicad_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::intersect_polygons].emplace_back( BITMAPS::intersect_polygons, wxT( "intersect_polygons_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset].emplace_back( BITMAPS::jobset, wxT( "jobset_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::jobset_open].emplace_back( BITMAPS::jobset_open, wxT( "jobset_open_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::merge_polygons].emplace_back( BITMAPS::merge_polygons, wxT( "merge_polygons_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::outset_from_selection].emplace_back( BITMAPS::outset_from_selection, wxT( "outset_from_selection_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_xml].emplace_back( BITMAPS::post_xml, wxT( "post_xml_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_odb].emplace_back( BITMAPS::post_odb, wxT( "post_odb_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_clone].emplace_back( BITMAPS::project_clone, wxT( "project_clone_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ray_tracing].emplace_back( BITMAPS::ray_tracing, wxT( "ray_tracing_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::restore_from_file].emplace_back( BITMAPS::restore_from_file, wxT( "restore_from_file_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_board_body].emplace_back( BITMAPS::show_board_body, wxT( "show_board_body_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_plot].emplace_back( BITMAPS::sim_add_plot, wxT( "sim_add_plot_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_command].emplace_back( BITMAPS::sim_command, wxT( "sim_command_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::slice_line].emplace_back( BITMAPS::slice_line, wxT( "slice_line_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dnp].emplace_back( BITMAPS::show_dnp, wxT( "show_dnp_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::subtract_polygons].emplace_back( BITMAPS::subtract_polygons, wxT( "subtract_polygons_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table].emplace_back( BITMAPS::table, wxT( "table_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_after].emplace_back( BITMAPS::table_add_column_after, wxT( "table_add_column_after_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_column_before].emplace_back( BITMAPS::table_add_column_before, wxT( "table_add_column_before_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_above].emplace_back( BITMAPS::table_add_row_above, wxT( "table_add_row_above_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_add_row_below].emplace_back( BITMAPS::table_add_row_below, wxT( "table_add_row_below_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_column].emplace_back( BITMAPS::table_delete_column, wxT( "table_delete_column_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_delete_row].emplace_back( BITMAPS::table_delete_row, wxT( "table_delete_row_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_edit].emplace_back( BITMAPS::table_edit, wxT( "table_edit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select].emplace_back( BITMAPS::table_select, wxT( "table_select_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_column].emplace_back( BITMAPS::table_select_column, wxT( "table_select_column_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::table_select_row].emplace_back( BITMAPS::table_select_row, wxT( "table_select_row_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_horizontally].emplace_back( BITMAPS::zoom_in_horizontally, wxT( "zoom_in_horizontally_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_horizontally].emplace_back( BITMAPS::zoom_out_horizontally, wxT( "zoom_out_horizontally_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in_vertically].emplace_back( BITMAPS::zoom_in_vertically, wxT( "zoom_in_vertically_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out_vertically].emplace_back( BITMAPS::zoom_out_vertically, wxT( "zoom_out_vertically_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_32].emplace_back( BITMAPS::icon_bitmap2component_32, wxT( "icon_bitmap2component_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_32].emplace_back( BITMAPS::icon_eeschema_32, wxT( "icon_eeschema_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_32].emplace_back( BITMAPS::icon_gerbview_32, wxT( "icon_gerbview_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_32].emplace_back( BITMAPS::icon_kicad_32, wxT( "icon_kicad_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_32].emplace_back( BITMAPS::icon_kicad_nightly_32, wxT( "icon_kicad_nightly_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_32].emplace_back( BITMAPS::icon_libedit_32, wxT( "icon_libedit_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_32].emplace_back( BITMAPS::icon_modedit_32, wxT( "icon_modedit_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_32].emplace_back( BITMAPS::icon_pagelayout_editor_32, wxT( "icon_pagelayout_editor_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_32].emplace_back( BITMAPS::icon_pcbcalculator_32, wxT( "icon_pcbcalculator_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_32].emplace_back( BITMAPS::icon_pcbnew_32, wxT( "icon_pcbnew_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_32].emplace_back( BITMAPS::icon_bitmap2component_32, wxT( "icon_bitmap2component_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_32].emplace_back( BITMAPS::icon_eeschema_32, wxT( "icon_eeschema_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_32].emplace_back( BITMAPS::icon_gerbview_32, wxT( "icon_gerbview_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_32].emplace_back( BITMAPS::icon_kicad_32, wxT( "icon_kicad_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_32].emplace_back( BITMAPS::icon_kicad_nightly_32, wxT( "icon_kicad_nightly_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_32].emplace_back( BITMAPS::icon_libedit_32, wxT( "icon_libedit_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_32].emplace_back( BITMAPS::icon_modedit_32, wxT( "icon_modedit_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_32].emplace_back( BITMAPS::icon_pagelayout_editor_32, wxT( "icon_pagelayout_editor_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_32].emplace_back( BITMAPS::icon_pcbcalculator_32, wxT( "icon_pcbcalculator_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_32].emplace_back( BITMAPS::icon_pcbnew_32, wxT( "icon_pcbnew_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_256.png" ), 256, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_dark_256.png" ), 256, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::dialog_warning].emplace_back( BITMAPS::dialog_warning, wxT( "dialog_warning_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_3d].emplace_back( BITMAPS::icon_3d, wxT( "icon_3d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_left].emplace_back( BITMAPS::reannotate_down_left, wxT( "reannotate_down_left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_right].emplace_back( BITMAPS::reannotate_down_right, wxT( "reannotate_down_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_down].emplace_back( BITMAPS::reannotate_left_down, wxT( "reannotate_left_down_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_up].emplace_back( BITMAPS::reannotate_left_up, wxT( "reannotate_left_up_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_down].emplace_back( BITMAPS::reannotate_right_down, wxT( "reannotate_right_down_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_up].emplace_back( BITMAPS::reannotate_right_up, wxT( "reannotate_right_up_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_left].emplace_back( BITMAPS::reannotate_up_left, wxT( "reannotate_up_left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_right].emplace_back( BITMAPS::reannotate_up_right, wxT( "reannotate_up_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::wizard_add_fplib_icon].emplace_back( BITMAPS::wizard_add_fplib_icon, wxT( "wizard_add_fplib_icon_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::dialog_warning].emplace_back( BITMAPS::dialog_warning, wxT( "dialog_warning_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_3d].emplace_back( BITMAPS::icon_3d, wxT( "icon_3d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_left].emplace_back( BITMAPS::reannotate_down_left, wxT( "reannotate_down_left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_right].emplace_back( BITMAPS::reannotate_down_right, wxT( "reannotate_down_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_down].emplace_back( BITMAPS::reannotate_left_down, wxT( "reannotate_left_down_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_up].emplace_back( BITMAPS::reannotate_left_up, wxT( "reannotate_left_up_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_down].emplace_back( BITMAPS::reannotate_right_down, wxT( "reannotate_right_down_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_up].emplace_back( BITMAPS::reannotate_right_up, wxT( "reannotate_right_up_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_left].emplace_back( BITMAPS::reannotate_up_left, wxT( "reannotate_up_left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_right].emplace_back( BITMAPS::reannotate_up_right, wxT( "reannotate_up_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::wizard_add_fplib_icon].emplace_back( BITMAPS::wizard_add_fplib_icon, wxT( "wizard_add_fplib_icon_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_sizes].emplace_back( BITMAPS::teardrop_sizes, wxT( "teardrop_sizes_130.png" ), 130, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_rect_sizes].emplace_back( BITMAPS::teardrop_rect_sizes, wxT( "teardrop_rect_sizes_130.png" ), 130, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_track_sizes].emplace_back( BITMAPS::teardrop_track_sizes, wxT( "teardrop_track_sizes_130.png" ), 130, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_sizes].emplace_back( BITMAPS::teardrop_sizes, wxT( "teardrop_sizes_dark_130.png" ), 130, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_rect_sizes].emplace_back( BITMAPS::teardrop_rect_sizes, wxT( "teardrop_rect_sizes_dark_130.png" ), 130, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_track_sizes].emplace_back( BITMAPS::teardrop_track_sizes, wxT( "teardrop_track_sizes_dark_130.png" ), 130, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_sizes].emplace_back( BITMAPS::teardrop_sizes, wxT( "teardrop_sizes_260.png" ), 260, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_rect_sizes].emplace_back( BITMAPS::teardrop_rect_sizes, wxT( "teardrop_rect_sizes_260.png" ), 260, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_track_sizes].emplace_back( BITMAPS::teardrop_track_sizes, wxT( "teardrop_track_sizes_260.png" ), 260, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_sizes].emplace_back( BITMAPS::teardrop_sizes, wxT( "teardrop_sizes_dark_260.png" ), 260, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_rect_sizes].emplace_back( BITMAPS::teardrop_rect_sizes, wxT( "teardrop_rect_sizes_dark_260.png" ), 260, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_track_sizes].emplace_back( BITMAPS::teardrop_track_sizes, wxT( "teardrop_track_sizes_dark_260.png" ), 260, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_length_legend].emplace_back( BITMAPS::tune_diff_pair_length_legend, wxT( "tune_diff_pair_length_legend_156.png" ), 156, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_single_track_length_legend].emplace_back( BITMAPS::tune_single_track_length_legend, wxT( "tune_single_track_length_legend_156.png" ), 156, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_length_legend].emplace_back( BITMAPS::tune_diff_pair_length_legend, wxT( "tune_diff_pair_length_legend_dark_156.png" ), 156, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_single_track_length_legend].emplace_back( BITMAPS::tune_single_track_length_legend, wxT( "tune_single_track_length_legend_dark_156.png" ), 156, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_length_legend].emplace_back( BITMAPS::tune_diff_pair_length_legend, wxT( "tune_diff_pair_length_legend_312.png" ), 312, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_single_track_length_legend].emplace_back( BITMAPS::tune_single_track_length_legend, wxT( "tune_single_track_length_legend_312.png" ), 312, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_length_legend].emplace_back( BITMAPS::tune_diff_pair_length_legend, wxT( "tune_diff_pair_length_legend_dark_312.png" ), 312, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_single_track_length_legend].emplace_back( BITMAPS::tune_single_track_length_legend, wxT( "tune_single_track_length_legend_dark_312.png" ), 312, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_skew_legend].emplace_back( BITMAPS::tune_diff_pair_skew_legend, wxT( "tune_diff_pair_skew_legend_110.png" ), 110, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_skew_legend].emplace_back( BITMAPS::tune_diff_pair_skew_legend, wxT( "tune_diff_pair_skew_legend_dark_110.png" ), 110, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_skew_legend].emplace_back( BITMAPS::tune_diff_pair_skew_legend, wxT( "tune_diff_pair_skew_legend_220.png" ), 220, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_skew_legend].emplace_back( BITMAPS::tune_diff_pair_skew_legend, wxT( "tune_diff_pair_skew_legend_dark_220.png" ), 220, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_bridge].emplace_back( BITMAPS::att_bridge, wxT( "att_bridge.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_pi].emplace_back( BITMAPS::att_pi, wxT( "att_pi.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_splitter].emplace_back( BITMAPS::att_splitter, wxT( "att_splitter.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_tee].emplace_back( BITMAPS::att_tee, wxT( "att_tee.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::c_microstrip].emplace_back( BITMAPS::c_microstrip, wxT( "c_microstrip.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::coax].emplace_back( BITMAPS::coax, wxT( "coax.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_multiplier].emplace_back( BITMAPS::color_code_multiplier, wxT( "color_code_multiplier.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_tolerance].emplace_back( BITMAPS::color_code_tolerance, wxT( "color_code_tolerance.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_value].emplace_back( BITMAPS::color_code_value, wxT( "color_code_value.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_value_and_name].emplace_back( BITMAPS::color_code_value_and_name, wxT( "color_code_value_and_name.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::creepage_clearance].emplace_back( BITMAPS::creepage_clearance, wxT( "creepage_clearance.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cpw].emplace_back( BITMAPS::cpw, wxT( "cpw.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cpw_back].emplace_back( BITMAPS::cpw_back, wxT( "cpw_back.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::microstrip].emplace_back( BITMAPS::microstrip, wxT( "microstrip.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::microstrip_zodd_zeven].emplace_back( BITMAPS::microstrip_zodd_zeven, wxT( "microstrip_zodd_zeven.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth].emplace_back( BITMAPS::pads_npth, wxT( "pads_npth.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_bottom].emplace_back( BITMAPS::pads_npth_bottom, wxT( "pads_npth_bottom.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top].emplace_back( BITMAPS::pads_npth_top, wxT( "pads_npth_top.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top_bottom].emplace_back( BITMAPS::pads_npth_top_bottom, wxT( "pads_npth_top_bottom.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused].emplace_back( BITMAPS::pads_remove_unused, wxT( "pads_remove_unused.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused_keep_bottom].emplace_back( BITMAPS::pads_remove_unused_keep_bottom, wxT( "pads_remove_unused_keep_bottom.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_reset_unused].emplace_back( BITMAPS::pads_reset_unused, wxT( "pads_reset_unused.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rectwaveguide].emplace_back( BITMAPS::rectwaveguide, wxT( "rectwaveguide.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::regul].emplace_back( BITMAPS::regul, wxT( "regul.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::regul_3pins].emplace_back( BITMAPS::regul_3pins, wxT( "regul_3pins.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::splash].emplace_back( BITMAPS::splash, wxT( "splash.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stripline].emplace_back( BITMAPS::stripline, wxT( "stripline.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dash].emplace_back( BITMAPS::stroke_dash, wxT( "stroke_dash.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdot].emplace_back( BITMAPS::stroke_dashdot, wxT( "stroke_dashdot.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdotdot].emplace_back( BITMAPS::stroke_dashdotdot, wxT( "stroke_dashdotdot.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dot].emplace_back( BITMAPS::stroke_dot, wxT( "stroke_dot.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_solid].emplace_back( BITMAPS::stroke_solid, wxT( "stroke_solid.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_none].emplace_back( BITMAPS::stroke_none, wxT( "stroke_none.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::twistedpair].emplace_back( BITMAPS::twistedpair, wxT( "twistedpair.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::viacalc].emplace_back( BITMAPS::viacalc, wxT( "viacalc.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_bridge].emplace_back( BITMAPS::att_bridge, wxT( "att_bridge_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_pi].emplace_back( BITMAPS::att_pi, wxT( "att_pi_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_splitter].emplace_back( BITMAPS::att_splitter, wxT( "att_splitter_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_tee].emplace_back( BITMAPS::att_tee, wxT( "att_tee_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::c_microstrip].emplace_back( BITMAPS::c_microstrip, wxT( "c_microstrip_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::coax].emplace_back( BITMAPS::coax, wxT( "coax_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_multiplier].emplace_back( BITMAPS::color_code_multiplier, wxT( "color_code_multiplier_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_tolerance].emplace_back( BITMAPS::color_code_tolerance, wxT( "color_code_tolerance_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_value].emplace_back( BITMAPS::color_code_value, wxT( "color_code_value_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_value_and_name].emplace_back( BITMAPS::color_code_value_and_name, wxT( "color_code_value_and_name_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::creepage_clearance].emplace_back( BITMAPS::creepage_clearance, wxT( "creepage_clearance_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cpw].emplace_back( BITMAPS::cpw, wxT( "cpw_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cpw_back].emplace_back( BITMAPS::cpw_back, wxT( "cpw_back_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::microstrip].emplace_back( BITMAPS::microstrip, wxT( "microstrip_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::microstrip_zodd_zeven].emplace_back( BITMAPS::microstrip_zodd_zeven, wxT( "microstrip_zodd_zeven_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth].emplace_back( BITMAPS::pads_npth, wxT( "pads_npth_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_bottom].emplace_back( BITMAPS::pads_npth_bottom, wxT( "pads_npth_bottom_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top].emplace_back( BITMAPS::pads_npth_top, wxT( "pads_npth_top_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top_bottom].emplace_back( BITMAPS::pads_npth_top_bottom, wxT( "pads_npth_top_bottom_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused].emplace_back( BITMAPS::pads_remove_unused, wxT( "pads_remove_unused_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused_keep_bottom].emplace_back( BITMAPS::pads_remove_unused_keep_bottom, wxT( "pads_remove_unused_keep_bottom_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_reset_unused].emplace_back( BITMAPS::pads_reset_unused, wxT( "pads_reset_unused_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rectwaveguide].emplace_back( BITMAPS::rectwaveguide, wxT( "rectwaveguide_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::regul].emplace_back( BITMAPS::regul, wxT( "regul_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::regul_3pins].emplace_back( BITMAPS::regul_3pins, wxT( "regul_3pins_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::splash].emplace_back( BITMAPS::splash, wxT( "splash_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stripline].emplace_back( BITMAPS::stripline, wxT( "stripline_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dash].emplace_back( BITMAPS::stroke_dash, wxT( "stroke_dash_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdot].emplace_back( BITMAPS::stroke_dashdot, wxT( "stroke_dashdot_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdotdot].emplace_back( BITMAPS::stroke_dashdotdot, wxT( "stroke_dashdotdot_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dot].emplace_back( BITMAPS::stroke_dot, wxT( "stroke_dot_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_solid].emplace_back( BITMAPS::stroke_solid, wxT( "stroke_solid_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_none].emplace_back( BITMAPS::stroke_none, wxT( "stroke_none_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::twistedpair].emplace_back( BITMAPS::twistedpair, wxT( "twistedpair_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::viacalc].emplace_back( BITMAPS::viacalc, wxT( "viacalc_dark.png" ), -1, wxT( "dark" ) );

};

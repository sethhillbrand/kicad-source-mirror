/*
 * This program source code file is part of KiCad, a free EDA CAD application.
 *
 * Copyright (C) 2020 Thomas Pointhuber <thomas.pointhuber@gmx.at>
 * Copyright (C) 2020 KiCad Developers, see AUTHORS.txt for contributors.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you may find one here:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * or you may search the http://www.gnu.org website for the version 2 license,
 * or you may write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

/**
 * @file pcb_barcode.h
 * @brief BARCODE class definition.
 */

#ifndef BARCODE_H_
#define BARCODE_H_


#include <board_item.h>

class LINE_READER;
class MSG_PANEL_ITEM;
class SHAPE_POLY_SET;
class PCB_TEXT;


enum class BARCODE_T : int
{
    CODE_39 = 0,
    CODE_128 = 1,
    DATA_MATRIX = 2,
    QR_CODE = 3,
    MICRO_QR_CODE = 4
};

enum class BARCODE_ECC_T : int
{
    L = 1, // Low
    M = 2, // Medium
    Q = 3, // Quartile
    H = 4  // High
};

class PCB_BARCODE : public BOARD_ITEM
{
    int            m_width;  ///< Barcode width
    int            m_height; ///< Barcode height
    VECTOR2I       m_pos;    ///< Position of the barcode
    PCB_TEXT       m_text;
    BARCODE_T      m_kind;
    BARCODE_ECC_T  m_errorCorrection; ///< Error correction level for QR codes
    SHAPE_POLY_SET m_poly;            ///< Stores the S_POLYGON shape

public:
    PCB_BARCODE( BOARD_ITEM* aParent );

    // Do not create a copy constructor & operator=.
    // The ones generated by the compiler are adequate.

    ~PCB_BARCODE();

    static inline bool ClassOf( const EDA_ITEM* aItem ) { return aItem && PCB_BARCODE_T == aItem->Type(); }

    VECTOR2I GetPosition() const override;

    void SetPosition( const VECTOR2I& aPos ) override;

    void SetTextSize( const VECTOR2I& aTextSize ) { m_text.SetTextSize( aTextSize ); }

    void SetLayer( PCB_LAYER_ID aLayer ) override;

    int  GetWidth() const { return m_width; }
    void SetWidth( int aWidth ) { m_width = aWidth; }

    int  GetHeight() const { return m_height; }
    void SetHeight( int aHeight ) { m_height = aHeight; }

    const SHAPE_POLY_SET& GetPolyShape() const { return m_poly; }

    void ComputeBarcode();

    void           SetText( const wxString& NewText );
    const wxString GetText() const;

    PCB_TEXT&       Text() { return m_text; }
    const PCB_TEXT& Text() const { return m_text; }

    void SetErrorCorrection( BARCODE_ECC_T aErrorCorrection ) { m_errorCorrection = aErrorCorrection; }

    BARCODE_ECC_T GetErrorCorrection() const { return m_errorCorrection; }

    /**
     * Function Move
     * @param offset : moving vector
     */
    void Move( const VECTOR2I& offset ) override;
    void Rotate( const VECTOR2I& aRotCentre, const EDA_ANGLE& aAngle ) override;
    void Flip( const VECTOR2I& aCentre, FLIP_DIRECTION aFlipLeftRight ) override;

    VECTOR2I GetTopLeft() const;
    VECTOR2I GetBotRight() const;
    VECTOR2I GetCenter() const override { return GetPosition(); }
    void     SetRect( const VECTOR2I& aTopLeft, const VECTOR2I& aBotRight );

    void GetMsgPanelInfo( EDA_DRAW_FRAME* aFrame, std::vector<MSG_PANEL_ITEM>& aList ) override;

    bool HitTest( const VECTOR2I& aPosition, int aAccuracy ) const override;
    bool HitTest( const BOX2I& aRect, bool aContained, int aAccuracy = 0 ) const override;

    wxString GetClass() const override { return wxT( "BARCODE" ); }

    // Virtual function
    const BOX2I GetBoundingBox() const override;

    wxString GetItemDescription( UNITS_PROVIDER* aUnitsProvider, bool aFull ) const override;

    BITMAPS GetMenuImage() const override;

    EDA_ITEM* Clone() const override;

    virtual const BOX2I ViewBBox() const override;

    double Similarity( const BOARD_ITEM& aItem ) const override;

    bool operator==( const BOARD_ITEM& aItem ) const override;

    /**
     * Returns the type of the barcode.
     */
    BARCODE_T GetKind() const { return m_kind; }

    /**
     * Sets the type of the barcode.
     */
    void SetKind( BARCODE_T aKind ) { m_kind = aKind; }
};

#endif // DIMENSION_H_

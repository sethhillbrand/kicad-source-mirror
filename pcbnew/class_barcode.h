/*
 * This program source code file is part of KiCad, a free EDA CAD application.
 *
 * Copyright (C) 2020 Thomas Pointhuber <thomas.pointhuber@gmx.at>
 * Copyright (C) 2020 KiCad Developers, see AUTHORS.txt for contributors.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, you may find one here:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * or you may search the http://www.gnu.org website for the version 2 license,
 * or you may write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

/**
 * @file class_barcode.h
 * @brief BARCODE class definition.
 */

#ifndef BARCODE_H_
#define BARCODE_H_


#include <class_board_item.h>
#include <class_pcb_text.h>


class LINE_READER;
class TEXTE_PCB;
class MSG_PANEL_ITEM;


/**
 * Enum STROKE_T
 * is the set of shapes for segments (graphic segments and tracks) which are often
 * in the .m_Shape member
 */
enum class BARCODE_T
{
    CODE_39,
    CODE_128,
    QR_CODE
};

class PCB_BARCODE : public BOARD_ITEM
{
    int            m_Width;  ///< Barcode width
    int            m_Height; ///< Barcode height
    TEXTE_PCB      m_Text;
    BARCODE_T      m_Kind;
    SHAPE_POLY_SET m_Poly; ///< Stores the S_POLYGON shape

public:
    PCB_BARCODE( BOARD_ITEM* aParent );

    // Do not create a copy constructor & operator=.
    // The ones generated by the compiler are adequate.

    ~PCB_BARCODE();

    static inline bool ClassOf( const EDA_ITEM* aItem )
    {
        return aItem && PCB_BARCODE_T == aItem->Type();
    }

    const wxPoint GetPosition() const override;

    void SetPosition( const wxPoint& aPos ) override;

    void SetTextSize( const wxSize& aTextSize )
    {
        m_Text.SetTextSize( aTextSize );
    }

    void SetLayer( PCB_LAYER_ID aLayer ) override;

    int GetWidth() const
    {
        return m_Width;
    }
    void SetWidth( int aWidth )
    {
        m_Width = aWidth;
    }

    int GetHeight() const
    {
        return m_Height;
    }
    void SetHeight( int aHeight )
    {
        m_Width = aHeight;
    }

    SHAPE_POLY_SET& GetPolyShape()
    {
        return m_Poly;
    }

    /**
     * Function ComputeBarcode
     * Compute elements of the barcode
     */
    void ComputeBarcode();

    void           SetText( const wxString& NewText );
    const wxString GetText() const;

    TEXTE_PCB& Text()
    {
        return m_Text;
    }
    TEXTE_PCB& Text() const
    {
        return *( const_cast<TEXTE_PCB*>( &m_Text ) );
    }

    /**
     * Function Move
     * @param offset : moving vector
     */
    void Move( const wxPoint& offset ) override;
    void Rotate( const wxPoint& aRotCentre, double aAngle ) override;
    void Flip( const wxPoint& aCentre, bool aFlipLeftRight ) override;

    void GetMsgPanelInfo( EDA_DRAW_FRAME* aFrame, std::vector<MSG_PANEL_ITEM>& aList ) override;

    bool HitTest( const wxPoint& aPosition, int aAccuracy ) const override;
    bool HitTest( const EDA_RECT& aRect, bool aContained, int aAccuracy = 0 ) const override;

    wxString GetClass() const override
    {
        return wxT( "BARCODE" );
    }

    // Virtual function
    const EDA_RECT GetBoundingBox() const override;

    wxString GetSelectMenuText( EDA_UNITS aUnits ) const override;

    BITMAP_DEF GetMenuImage() const override;

    EDA_ITEM* Clone() const override;

    virtual const BOX2I ViewBBox() const override;

    virtual void SwapData( BOARD_ITEM* aImage ) override;

#if defined( DEBUG )
    virtual void Show( int nestLevel, std::ostream& os ) const override
    {
        ShowDummy( os );
    }
#endif
};

#endif // DIMENSION_H_
